Given a matrix, A of size M x N of 0s and 1s. If an element is 0, set its entire row and column to 0.

Note: This will be evaluated on the extra memory used. Try to minimize the space and time complexity.



Input Format:

The first and the only argument of input contains a 2-d integer matrix, A, of size M x N.
Output Format:

Return a 2-d matrix that satisfies the given conditions.
Constraints:

1 <= N, M <= 1000
0 <= A[i][j] <= 1
Examples:

Input 1:
    [   [1, 0, 1],
        [1, 1, 1], 
        [1, 1, 1]   ]

Output 1:
    [   [0, 0, 0],
        [1, 0, 1],
        [1, 0, 1]   ]

Input 2:
    [   [1, 0, 1],
        [1, 1, 1],
        [1, 0, 1]   ]

Output 2:
    [   [0, 0, 0],
        [1, 0, 1],
        [0, 0, 0]   ]
        
        
        
 Java:
 
 public class Solution {
    public void setZeroes(ArrayList<ArrayList<Integer>> a) {
         HashSet<Integer> rowSet = new HashSet<>();
        HashSet<Integer> colSet = new HashSet<>();
        for(int row = 0; row < a.size(); row++) {
            for(int col = 0; col < a.get(0).size(); col++) {
                if(a.get(row).get(col) == 0) {
                    rowSet.add(row);
                    colSet.add(col);
                }
            }
        }
        for(int row = 0; row < a.size(); row++) {
            for(int col = 0; col < a.get(0).size(); col++) {
                if(rowSet.contains(row) || colSet.contains(col)) {
                    a.get(row).set(col, 0);
                }
            }
        }
    }
}
