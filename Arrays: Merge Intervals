Given a set of non-overlapping intervals, insert a new interval into the intervals (merge if necessary).

You may assume that the intervals were initially sorted according to their start times.

Example 1:

Given intervals [1,3],[6,9] insert and merge [2,5] would result in [1,5],[6,9].

Example 2:

Given [1,2],[3,5],[6,7],[8,10],[12,16], insert and merge [4,9] would result in [1,2],[3,10],[12,16].

This is because the new interval [4,9] overlaps with [3,5],[6,7],[8,10].

Make sure the returned intervals are also sorted.


Java:
O(N)

/**
 * Definition for an interval.
 * public class Interval {
 *     int start;
 *     int end;
 *     Interval() { start = 0; end = 0; }
 *     Interval(int s, int e) { start = s; end = e; }
 * }
 */
public class Solution {
    public ArrayList<Interval> insert(ArrayList<Interval> intervals, Interval newInterval) {
         ArrayList<Interval> output = new ArrayList<Interval>();
         
         int i = 0;
         int size = intervals.size();
         // Add all the points before we encounter the interval
         while (i < size && newInterval.start > intervals.get(i).end) {
             output.add(intervals.get(i));
             i++;
         }
         
         // For the overlapping ranges, compute the minimum start point and maximum end point of the range
         while (i < size && newInterval.end >= intervals.get(i).start) {
             newInterval.start = Math.min(newInterval.start, intervals.get(i).start);
             newInterval.end = Math.max(newInterval.end, intervals.get(i).end);
             i++;
         }
         output.add(newInterval);
         
         // Add the points after we encounter the interval
         while (i < size) {
             output.add(intervals.get(i));
          i++;
         }
         return output;
     }
 }
